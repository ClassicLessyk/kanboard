# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- terraform-trigger


variables:
  storageRGName: 'cloud-shell-storage-westeurope'
  storageName: 'csb10032002408143f0'
  containerName: 'tfstate'
  storageKey: 'terraform.pipeline.tfstate'
  phpVersion: '7.4'
  vmImageName: 'ubuntu-latest'
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
  - stage: validation
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ConnectionForTF'
              backendAzureRmResourceGroupName: '$(storageRGName)'
              backendAzureRmStorageAccountName: '$(storageName)'
              backendAzureRmContainerName: '$(containerName)'
              backendAzureRmKey: '$(storageKey)'
          - task: TerraformTaskV3@3
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: Deploy
    condition: succeeded('validation')
    dependsOn: validation
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ConnectionForTF'
              backendAzureRmResourceGroupName: '$(storageRGName)'
              backendAzureRmStorageAccountName: '$(storageName)'
              backendAzureRmContainerName: '$(containerName)'
              backendAzureRmKey: '$(storageKey)'
          - task: TerraformTaskV3@3
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var "db_admin_password=$(db_admin_password)"'
              environmentServiceNameAzureRM: 'ConnectionForTF'
        
          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-var "db_admin_password=$(db_admin_password)"'
              environmentServiceNameAzureRM: 'ConnectionForTF'
  - stage: Build
    displayName: Build
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
        - script: |
            sudo apt install php$(phpVersion)
            sudo update-alternatives --set php /usr/bin/php$(phpVersion)
            sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
            sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
            sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
            sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
            php -version
          displayName: 'Use PHP version $(phpVersion)'

        - script: composer install --no-interaction --prefer-dist
          displayName: 'composer install'
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(rootFolder)'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true

        - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          displayName: 'Upload package'
          artifact: drop
  
